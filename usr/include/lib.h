/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2016 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * include/lib.h : lib/lib.cmm の外部インタフェース
 *
 * 2015.06.08　新規作成
 *
 * $Id$
 */

// ------------------------------ メモリ関係 ---------------------------------
public void[] alcAddr;                          // ヒープ領域終端を示すポインタ
public void _memInit();                         // メモリの初期化
                                                //   crt0.s から呼ばれる
/*----------------------------------------------------------------------------
 *   名前   : malloc
 *　 戻り値 : void[] (失敗なら null)
 *　 引数   : int s 確保したいメモリの大きさ
 *   解説   : メモリを確保する
 */
public void[] malloc(int s);

/*----------------------------------------------------------------------------
 *   名前   : free
 *　 戻り値 : なし
 *　 引数   : void[] mem 解放したいメモリへのポインタ
 *   解説   : メモリを解放する
 */
public void free(void[] mem);


// ----------------------------- コンソール表示関係 -------------------------
/*----------------------------------------------------------------------------
 *   名前   : printf
 *　 戻り値 : 引数の数
 *　 引数   : char[] fmt フォーマット文字列
 *   解説   : フォーマット文字列で指定された形式でコンソールに表示する
 */
public int printf(char[] fmt, ...);

public void _perror(char[] msg, int err);       // シェル専用メッセージ表示関数

/*----------------------------------------------------------------------------
 *   名前   : perror
 *　 戻り値 : なし
 *　 引数   : char[] msg 追加したいメッセージ
 *   解説   : msg と共に、エラーメッセージを表示する
 */
public void perror(char[] msg);


// --------------------------------- readDir 関係 ---------------------------
struct Dir {                                    // ディレクトリを表すデータ構造
    char[] name;                                // ファイル名("abcdefghtxt"形式)
    int    attr;                                // 属性
    int    clst;                                // 先頭クラスタ
    int    lenH, lenL;                          // ファイルサイズ
};

/*----------------------------------------------------------------------------
 *   名前   : readDir
 *   戻り値 : int (1:正常に読み込んだ、0:EOF、-1:エラー)
 *   引数   : int fd オープン済みファイル番号
 *            dir ディレクトリエントリを読み込むバッファ
 *            次のようなプログラムで準備しておく
 *              -----------------------------------------------------------
 *              Dir dir = malloc(sizeof(Dir));
 *              dir.name = malloc(12);            // 8+3+1
 *              readDir(fd, dir);
 *              -----------------------------------------------------------
 *            DIR 構造体は次のようなもの
 *              struct Dir {
 *                char[] name; // ファイル名
 *                int    attr; // ファイルの属性(0x10 ならディレクトリ)
 *                int    clst; // ファイルの開始クラスタ番号
 *                int    lenH; // ファイルの長さ上位 16bit
 *                int    lenL; // ファイルの長さ下位 16bit
 *              }
 *   解説   : ファイルからデータを読み込む
 */
public int readDir(int fd, Dir dir);
