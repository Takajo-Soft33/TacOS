/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2016 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * lib/lib.cmm : C-- で記述するライブラリ関数を集めたファイル
 *
 * 2016.01.07 : include と lib に分離
 * 2015.12.17 : readDir() を実装
 * 2015.06.10 : カーネル用の printf をコピーしユーザ用に修正、putch を新規に実装
 * 2015.06.08 : panic() 使用箇所を(printf + exit(1))に変更
 * 2015.06.05 : 新規作成
 *
 * $Id$
 */

#include <crt0.h>
#include <lib.h>
#include <syslib.h>

#define MBSIZE sizeof(MemBlk)                   // MemBlk のバイト数
#define MAGIC  (memPool)                        // 番兵のアドレスを使用する

// 空き領域はリストにして管理される
struct MemBlk {                                 // 空き領域管理用の構造体
  MemBlk next;                                  // 次の空き領域アドレス
  int    size;                                  // 空き領域サイズ
};

public void[] alcAddr = null;                   // どこまで割り当てたか
// -------------------------- メモリ初期化ルーチン ----------------------------
// メモリ管理の初期化
MemBlk memPool = {null, 0};                     // 空き領域リストのルート
public int _end();                              // プロセスの BBS 領域の最後

// メモリの初期化
//   メモリの開始アドレス addrof(_end)
//   メモリの大きさ SP - addrof(_end)
public void  _memInit() {                       // プログラム起動前の初期化
  int sp = _sp();                               // メモリの終端アドレス
  memPool.next = _ItoA(addrof(_end));           // 空き領域
  memPool.next.size = sp - addrof(_end);        // 空きメモリサイズ
  memPool.next.next = null;

  alcAddr = _ItoA(addrof(_end));                // 割当アドレスの初期化
}

// ------------------------- メモリ割当・解放ルーチン -------------------------

// メモリを割り付ける
public void[] malloc(int s) {                   // メモリ割り当て
  s = (s + MBSIZE + 1) & ~1;                    // 制御データ分大きい偶数に

  MemBlk p = memPool;                           // 直前の領域
  MemBlk m = p.next;                            // 対象となる領域

  while (_uCmp(m.size,s)<0) {                   // 領域が小さい間
    p = m;                                      // リストを手繰る
    m = m.next;
    if (m==null) return null;                   // リストの最後まできた
  }

  if (_uCmp(s,m.size)<=0 &&                     // ちょうどピッタリか
      _uCmp(m.size, s+MBSIZE)<=0) {             // 分割する価値がないサイズ
    p.next = m.next;
  } else {                                      // 領域を分割する価値がある
    int ss = m.size - s;                        // ss は最低でも MBSIZE より大
    MemBlk q = _addrAdd(m, s);                  // 残り領域
    q.next = m.next;
    q.size = ss;
    p.next = q;
    m.size = s;
  }
  m.next = MAGIC;                               // マジックナンバー格納

  // どこまでメモリを割り当てたかを示すポインタを更新
  if (_aCmp(_addrAdd(m,MBSIZE+m.size),alcAddr)>1)// 今までより深く割当したなら
    alcAddr = _addrAdd(m, MBSIZE+m.size);       //   ポインタを更新

  // SP と割り付けたメモリの衝突を検知したらエラー出力して終了
  if (_aCmp(alcAddr, _ItoA(_sp()))>=0) {        // ポインタが SP 以上なら
    printf("malloc: no enough memory\n");       //   エラー出力し
    exit(1);                                    //     異常終了
  }

  return _addrAdd(m, MBSIZE);                   // 管理領域を除いて返す
}

// メモリを解放する
public void free(void[] mem) {                  // 領域解放
  MemBlk q = _addrAdd(mem, -MBSIZE);            // 解放する領域
  MemBlk p = memPool;                           // 直前の空き領域
  MemBlk m = p.next;                            // 直後の空き領域

  if (q.next!=MAGIC) {                          // 領域マジックナンバー確認
    printf("free: bad address\n");
    exit(1);                                    // 異常終了
  }

  while (_aCmp(m, q)<0) {                       // 解放する領域の位置を探る
    p = m;
    m = m.next;
    if (m==null) break;
  }

  void[] ql = _addrAdd(q, q.size);              // 解放する領域の最後
  void[] pl = _addrAdd(p, p.size);              // 直前の領域の最後

  if (_aCmp(q,pl)<0 || m!=null&&_aCmp(m,ql)<0) {// 未割り当て領域では？
    printf("free: bad address\n");
    exit(1);                                    // 異常終了
  }

  if (pl==q) {                                  // 直前の領域に隣接している
    p.size = p.size + q.size;
    if (ql==m) {                                // 直後の領域とも隣接してる
      p.size = p.size + m.size;
      p.next = m.next;
    }
  } else if (m==null) {                         // ヒープの最後の部分
    p.next = q;
    q.next = null;
  } else if (ql==m) {                           // 直後の領域に隣接している
    q.size = q.size + m.size;
    q.next = m.next;
    p.next = q;
  } else {
    p.next = q;
    q.next = m;
  }

  // 最も深く割り当てたメモリを解放したならば、ポインタを直前の最深の末尾に移動
  //   解放した領域の直前の空き領域の先頭は、最深の直前の割当領域の終端になる
  if (_aCmp(alcAddr, ql)==0)                    // 現在の最深を解放したなら
    alcAddr = p;                                //   ポインタを直前の最深に
}

// ------------------------------ 文字判断関係 -----------------------------

// 文字 c が 0~9 の間か
public boolean isDigit(char c) {
  return ord('0')<=ord(c) && ord(c)<=ord('9');
}

// 文字 c が印刷可能か
public boolean isPrint(char c) {
  return 0x20<=ord(c) && ord(c)<=0x7e;
}

// ---------------------------- 入出力ルーチン -----------------------------
#define LMAX 80                                 // 1行最大 80 文字
char[] lBuf = array(LMAX+1);                    // LMAX + '\0'
int bCnt = 0;                                   // lBuf の参照位置

// 渡された文字を lBuf に溜めて、まとめて TTY に送る
void putch(char c) {
  lBuf[bCnt]=c;
  bCnt = bCnt + 1;

  if(bCnt >= LMAX || c=='\0' || c=='\n') {      // バッファフラッシュが必要
    lBuf[bCnt]='\0';                            //   lBuf に終端記号を格納
    conWrite(lBuf);                             //   TTY に lBuf を送る
    bCnt = 0;                                   //   参照位置の初期化
  }
}

// 文字列を出力する
public void putstr(char[] str) {
  for (int i=0; str[i]!='\0'; i=i+1)
    putch(str[i]);
}

char[] __hstr = "0123456789abcdef";
int  __putnum_w;
int  __putnum_b;
char __putnum_p;
boolean __putnum_m;

void __putnum_sub(int x, int n) {
  if (x!=0) {
    __putnum_sub(x/__putnum_b, n+1);
    putch(__hstr[x%__putnum_b]);
  } else {
    if (__putnum_m&&__putnum_p!=' ') putch('-');
    if (n==0) __putnum_w = __putnum_w - 1;
    while (__putnum_w>n) {
      putch(__putnum_p);
      __putnum_w = __putnum_w - 1;
    }
    if (__putnum_m&&__putnum_p==' ') putch('-');
    if (n==0) putch('0');
  }
}

void __uputnum(int x, int w, char p, int base) {
  __putnum_b = base;
  __putnum_m = false;
  __putnum_w = w;
  __putnum_p = p;
  __putnum_sub(x,0);
}

void __sputnum(int x, int w, char p, int base) {
  __putnum_b = base;
  __putnum_m = false;
  if (x<0) {
    x = -x;
    __putnum_m = true;
    w = w - 1;
  }
  __putnum_w = w;
  __putnum_p = p;
  __putnum_sub(x,0);
}

void putdec(int x, int w, char p) {
  __sputnum(x,w,p,10);
}

void puthex(int x, int w, char p) {
  __uputnum(x,w,p,16);
}

// fmt を '\0' までたぐる、% の次が意味のあるものであれば後ろの引数を参照する
public int printf(char[] fmt, ...) {
  int[] args = _args();                         // fmt より後ろの引数を取得
  int n=0;
  int arg = args[0];                            // 関数の第2引数を取得する
  for (int i=0; fmt[i]!='\0'; i=i+1) {          // '\0' が来るまで fmt をたぐる
    char c = fmt[i];                            // fmt から1文字取得する
    if (c=='%') {                               // '%' ならば
      c = fmt[i=i+1];                           //   次の1文字を取得する
      char  p = ' ';
      if (c=='0') p='0';                        //   先行の0詰め用
      int  w = 0;
      while (isDigit(c)) {
        w = w * 10 + (ord(c) - ord('0'));
        c = fmt[i=i+1];
      }
      if (c=='\0') {                            // '\0' ならば
        putch('\0');                            //   lBuf を出力させる
        return n;
      } else if (c=='o') {                      // 8進数として出力
        __uputnum(arg,w,p,8);
        arg = args[n=n+1];                      // 後ろの引数を更新
      } else if (c=='d') {                      // 10進数として出力
        __sputnum(arg,w,p,10);
        arg = args[n=n+1];                      // 後ろの引数を更新
      } else if (c=='x') {                      // 16進数として出力
        __uputnum(arg,w,p,16);
        arg = args[n=n+1];                      // 後ろの引数を更新
      } else if (c=='c') {                      // 文字として出力
        putch(chr(arg));
        arg = args[n=n+1];                      // 後ろの引数を更新
      } else if (c=='s') {                      // 文字列として出力
        putstr(_ItoA(arg));
        arg = args[n=n+1];
      } else if (c=='%') {                      // '%' を出力
        putch('%');
      } else {
        putch(c);
      }
    } else                                      // '%' 以外なら
      putch(c);                                 //   そのまま出力
  }
  putch('\0');                                  // lBuf を出力させる
  return n;
}

// ------------------------------- エラー処理 ------------------------------
#define ELAST (-33)                             // エラー番号範囲
char[][] errList = {                            // エラーメッセージリスト
  null,                                         // エラー番号 0 は存在しない
  "Invalid file name",                          // -1  ファイル名が不正
  "No such file or directrory",                 // -2  ファイルが存在しない
  "File exists",                                // -3  同名ファイルが存在する
  "File is opened",                             // -4  オープンされている
  "File table overflow",                        // -5  システムのオープン超過
  "Bad file number",                            // -6  ファイル記述子が不正
  "No space left on device",                    // -7  デバイスに空き領域が不足
  "Bad path",                                   // -8  パスが不正
  "Bad mode",                                   // -9  モードが一致しない
  "Bad attribute",                              // -10 ファイルの属性が不正
  "Directory is not empty",                     // -11 ディレクトリが空でない
  "Invalid argument",                           // -12 引数が不正
  "Process table overflow",                     // -13 プロセスが多すぎる
  "Bad EXE file",                               // -14 EXE ファイルが不正
  "Bad MAGIC number",                           // -15 不正なマジック番号
  "Too many open files",                        // -16 プロセス毎のオープン超過
  "No children",                                // -17 子プロセスが存在しない
  "No zombie children",                         // -18 ゾンビの子が存在しない
  "Not enough core",                            // -19 十分な空き領域が無い
  "Invalid system call number",                 // -20 システムコール番号が不正
  "Zero division",                              // -21 ゼロ割り算
  "Privilege violation",                        // -22 特権例外
  "Illegality instruction",                     // -23 不正命令
  "Stack overflow",                             // -24 スタックオーバーフロー
  "stdio: Bad open mode",                       // -25 モードと使用方法が矛盾
  "stdio: Bad file pointer",                    // -26 不正な fp が使用された
  "fgetc: EOF was ignored",                     // -27 fgetc前にEOFチェック必要
  "fopen: EUNFILE",                             // -28 プロセス毎のオープン超過
  "fclose: Standard i/o should not be closed",  // -29 標準 io はクローズ不可
  "fprintf: Invalid conversion",                // -30 書式文字列に不正な変換
  "malloc: Insufficient memory",                // -31 ヒープ領域が不足
  "free: Bad address"                           // -32 malloc した領域ではない
};

public void _perror(char[] s, int err) {
  if (err>=0)     return;                       // 0以上なら何もしない
  if (err<=ELAST) {                             // err の値が不正なら
    putstr("Invalid err\n");                    //   エラーメッセージを出力
    return;
  }
  printf("%s : %s\n",s, errList[err*-1]);       // 対象のエラーメッセージを出力
  errno = 0;                                    // errno を初期化
}

public void perror(char[] s) {
  _perror(s, errno);
}

// ---------------------------- readDir の処理 ------------------------------

// isValidDirEnt : DIR エントリが有効か判定する
// 返り値        : true=有効なエントリ、false=無効なエントリ(未使用か削除済み)
// 引数  c       : DIR エントリの最初の文字

#define wordLE(b, i) ((ord((b)[(i)+1])<<8) | ord((b)[i]))
char[] buf = array(32);

public int readDir(int fd, Dir dir) {
  int r;
  while ((r=read(fd, buf, 32))>0) {            // EOF まで
    char flag = buf[0];                        //   エントリの先頭１バイト
    int  attr = ord(buf[11]);                  //   属性
    if (flag=='\x00') return 0;                //   この先に有効エントリは無い
    if (flag!='\xe5' && flag!='\x05' &&        //   有効なエントリでかつ
        (attr & 0x0a)==0) {                    //   通常ファイルかディレクトリ
      for (int i=0; i<11; i=i+1)               //     ファイル名をコピー
        dir.name[i]=buf[i];
      dir.name[11]='\0';                       //       ファイル名を完成させる
      dir.attr = attr;                         //     属性
      dir.clst = wordLE(buf, 26);              //     先頭クラスタ番号
      dir.lenH = wordLE(buf, 30);              //     上位ファイルサイズ
      dir.lenL = wordLE(buf, 28);              //     下位ファイルサイズ
      return 1;
    }
  }
  return r;
}
