/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2016 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

 /*
  * ss/ss.cmm : ファイル送信プログラム
  *
  * 2019.01.28 : 新規作成
  * 2019.04.10
  *
  * $Id$
  *
  */


//#define DEBUG

#if defined(DEBUG)
# define debug(...) fprintf(stderr, __VA_ARGS__)
#else
# define debug(...) /* debug(__VA_ARGS__) */
#endif

#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>

#define BUFFER_SIZE 240
#define BLOCK_SIZE ((BUFFER_SIZE * 4 + 2) / 3)

int[] filesize = array(2);
char[] buffer = array(BUFFER_SIZE);

void output(int length, char[] buffer, boolean wait_for_ack);
void b64_out(int length, int offset, char[] buffer);

public int main(int argc, char[][] argv){

  if (argc < 2){ /* ファイル名がない */
    fprintf(stderr, "Usage: %s <filename> [<as>]\n", argv[0]);
    return 1;
  }
  /* ファイル長を取得 */
  if (fsize(argv[1], filesize)){
    perror(argv[1]);
    return 1;
  }

  FILE fp = fopen(argv[1], "r");
  if (fp == null){ /* ファイルがない */
    fprintf(stderr, "file not found\n");
    return 1;
  }

  char[] filename_as = argv[1];
  if(argc >= 3){
    filename_as = argv[2];
  }

  printf("%s\n", filename_as); /* ファイル名を出力 */
  fflush(stdout);
  printf("%d\n", filesize[1]); /* ファイル長の下位32bit */
  fflush(stdout);
  printf("%d\n", BLOCK_SIZE); /* ブロックサイズ */
  fflush(stdout);

  //int checksum = 0;

  int length = 0;
  while (!feof(fp)){
    char c = fgetc(fp);
    buffer[length] = c;
    length = length + 1;

    if (length == BUFFER_SIZE){
      output(length, buffer, true);
      length = 0;
    }
  }
  if (length > 0) {
    output(length, buffer, true);
    length = 0;
  }

  return 0;
}

void output(int length, char[] buffer, boolean wait_for_ack){
  int offset = 0;
  while(offset < length) {
    int outlen = length - offset;
    if(outlen > 3) outlen = 3;
    b64_out(outlen, offset, buffer);
    offset = offset + outlen;
  }
  fprintf(stdout, "\n");
  fflush(stdout);

  /* Ackを待つ */
  while (wait_for_ack){
    fgets(buffer, BUFFER_SIZE, stdin);
    if (strNcmp(buffer, "!Ack", 4) != 0){
      if(buffer[0] == '!') {
        fprintf(stderr, "error: %s\n", buffer);
        exit(-1); /* Ackではないものが返ってきたので異常終了 */
      }
      debug("ss: Got ack");
      continue;
    }
    break;
  }
}

char[] b64T = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/";

/**
 * print(base64_encode(buffer[offset, length]))
 * @param length <= 3
 */
void b64_out(int length, int offset, char[] buffer) {
  char c0 = '=', c1 = '=', c2 = '=', c3 = '=';
  if(length >= 1) {
    int i0 = ord(buffer[offset]) >> 2 & 0x3f;
    c0 = b64T[i0];
    int i1 = ord(buffer[offset]) << 4 & 0x30;

    if(length >= 2) {
      i1 = i1 | ord(buffer[offset + 1]) >> 4 & 0x0f;
      int i2 = ord(buffer[offset + 1]) << 2 & 0x3c;

      if(length >= 3) {
        i2 = i2 | ord(buffer[offset + 2]) >> 6 & 0x03;
        int i3 = ord(buffer[offset + 2]) & 0x3f;
        c3 = b64T[i3];
      }
      c2 = b64T[i2];
    }
    c1 = b64T[i1];
  }
  fprintf(stdout, "%c%c%c%c", c0, c1, c2, c3);
}
