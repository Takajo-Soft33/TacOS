/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2016 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

 /*
  * ss/ss.cmm : ファイル送信プログラム
  *
  * 2019.01.28 : 新規作成
  *
  * $Id$
  *
  */


#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>

#define BLOCK_SIZE_SRC 48
#define BLOCK_SIZE_DST ((BLOCK_SIZE_SRC + 2) / 3 * 4)
#define BUFFER_SIZE 256

int[] filesize = array(2);
char[] buffer = array(BUFFER_SIZE);
char[] outbuf = array(BLOCK_SIZE_DST + 1);

char[] base64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
int base64encode(int inputLength, char[] input, char[] output);

void output(int length, char[] buffer, boolean wait_for_ack);

public int main(int argc, char[][] argv){

  if (argc < 2){ /* ファイル名がない */
    fprintf(stderr, "Usage: %s <filename> [<rename>]\n", argv[0]);
    return 1;
  }
  /* ファイル長を取得 */
  if (fsize(argv[1], filesize)){
    perror(argv[1]);
    return 1;
  }

  FILE fp = fopen(argv[1], "r");
  if (fp == null){ /* ファイルがない */
    fprintf(stderr, "file not found\n");
    return 1;
  }

  char[] filename = argv[1];
  if (argc > 2){
    filename = argv[2];
  }

  printf("%s\n", filename); /* ファイル名を出力 */
  printf("%d\n", filesize[1]); /* ファイル長の下位32bit */
  printf("%d\n", BLOCK_SIZE_DST); /* ブロックサイズ */

  //int checksum = 0;

  int length = 0;
  while (!feof(fp)){
    char c = fgetc(fp);
    buffer[length] = c;
    length = length + 1;

    if (length == BLOCK_SIZE_SRC){
      output(length, buffer, true);
      length = 0;
    }
  }
  if (length > 0) {
    output(length, buffer, false);
  }

  return 0;
}

void output(int length, char[] buffer, boolean wait_for_ack){
  base64encode(length, buffer, outbuf);
  fprintf(stdout, "%s\n", outbuf);
  fflush(stdout);

  /* Ackを待つ */
  while (wait_for_ack){
    fgets(buffer, BUFFER_SIZE, stdin);
    if (strNcmp(buffer, "!A", 2) != 0){
      if(buffer[0] == '!') {
        fprintf(stderr, "error: %s\n", buffer);
        exit(-1); /* Ackではないものが返ってきたので異常終了 */
      }
      continue;
    }
    break;
  }
}

int base64encode(int inputLength, char[] input, char[] output) {
  int part = 0;
  int offset = 0;
  int temp = 0;
  for (int i = 0; i < inputLength; i = i + 1) {
    if (0 == part) {
      temp = ord(input[i]) >> 2 & 0x3f;
      output[offset] = base64chars[temp];
      offset = offset + 1;

      temp = ord(input[i]) << 4 & 0x3f;
    } else if (1 == part) {
      temp = temp | ord(input[i]) >> 4 & 0x3f;
      output[offset] = base64chars[temp];
      offset = offset + 1;

      temp = ord(input[i]) << 2 & 0x3f;
    } else {
      temp = temp | ord(input[i]) >> 6 & 0x3f;
      output[offset] = base64chars[temp];
      offset = offset + 1;

      temp = ord(input[i]) & 0x3f;
      output[offset] = base64chars[temp];
      offset = offset + 1;
    }

    part = part + 1;
    if (part == 3) {
      part = 0;
    }
  }

  if(0 < part) {
    output[offset] = base64chars[temp];
    offset = offset + 1;

    output[offset] = '=';
    offset = offset + 1;

    if(2 > part) {
      output[offset] = '=';
      offset = offset + 1;
    }
  }

  output[offset] = '\0';

  return offset; /* outputLength */
}
