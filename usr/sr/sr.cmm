#define DEBUG

#if defined(DEBUG)
# define debug(...) fprintf(stderr, __VA_ARGS__)
#else
# define debug(...) /* __VA_ARGS__ */
#endif

#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <ctype.hmm>
#define N 81
char[] lbuf=array(N);

void bwrite(FILE fp, char[] bbuf, int bsize) {
  for (int i=0; i<bsize; i=i+1) {
    fputc(bbuf[i], fp);
  }
}

int base64decode(char[] input, char[] output);

public int main(int argc, char[][] argv) {
  if (argc>1) {
    debug("Usage: %s\n", argv[0]);
    return 1;
  }

  fgets(lbuf, N, stdin);
  int pos=strRchr(lbuf, '\n');
  if (pos==-1) {
    debug("format error");
    exit(1);
  }

  lbuf[pos] = '\0';

  debug("fopen:%s\n",lbuf);
  FILE fp = fopen(lbuf, "w");
  if (fp==null) {
    perror(lbuf);
    exit(1);
  }

  fgets(lbuf, N, stdin);
  int fsize = atoi(lbuf);
  debug("filelength:%s:%d\n",lbuf,fsize);

  fgets(lbuf, N, stdin);
  int bsize = atoi(lbuf);
  debug("blocksize:%s:%d\n",lbuf,bsize);

  int inbsize = ((bsize + 2) / 3) * 4;
  char[] bbuf = malloc(inbsize + 2);
  char[] obuf = malloc(bsize);

  int cbsize = 0;
  int cfsize = 0;
  while (cfsize<fsize) {
    fgets(bbuf, N, stdin);
    /// [入力のパース]
    int outlen = base64decode(bbuf, obuf);
    cbsize = cbsize + outlen;
    cfsize = cfsize + outlen;

    debug("file: %d / %d, buf: %d / %d\n", cfsize, fsize, cbsize, bsize);

    if(cbsize > bsize || cfsize > fsize) {
      printf("!overflow!\n");
      exit(1);
    }
    /// [/入力のパース]

    if (cbsize == bsize || cfsize == fsize) {
      bwrite(fp, obuf, cbsize);
      cbsize = 0;
      printf("!A\n");
    }

  }
  fclose(fp);

  return 0;
}

int base64ord(char c) {
  if (isUpper(c)) return ord(c) - 0x41 + 0x00;
  if (isLower(c)) return ord(c) - 0x61 + 0x1A;
  if (isDigit(c)) return ord(c) - 0x30 + 0x34;
  if ('+' == c) return 0x3e;
  if ('-' == c) return 0x3f;
  return -1;
}

int base64decode(char[] input, char[] output) {
  int temp;
  int offset = 0;
  int part = 0;
  for (int i = 0; '\0' != input[i]; i = i + 1) {
    int n = base64ord(input[i]);

    if (0 > n) {
      break;
    }

    if (0 == part) {
      temp = n << 2 & 0xff;
    } else if (1 == part) {
      temp = temp | n >> 4 & 0xff;
      output[offset] = chr(temp);
      offset = offset + 1;

      temp = n << 4 & 0xff;
    } else if (2 == part) {
      temp = temp | n >> 2 & 0xff;
      output[offset] = chr(temp);
      offset = offset + 1;

      temp = n << 6 & 0xff;
    } else {
      temp = temp | n;
      output[offset] = chr(temp);
      offset = offset + 1;
    }

    part = (part + 1) & 3;
  }

  return offset; /* outputLength */
}
