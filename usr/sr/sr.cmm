/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2016 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

 /*
  * ss/ss.cmm : ファイル送信プログラム
  *
  * 2019.01.28 : 新規作成
  *
  * $Id$
  *
  */

#define DEBUG

#if defined(DEBUG)
# define debug(...) fprintf(stderr, __VA_ARGS__)
#else
# define debug(...) /* debug(__VA_ARGS__) */
#endif

#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <ctype.hmm>
#define N 81
char[] lbuf=array(N);

void chomp(char[] str);

void bwrite(FILE fp, char[] bbuf, int bsize) {
  for (int i=0; i<bsize; i=i+1) {
    fputc(bbuf[i], fp);
  }
}

int input(int length, char[] inbuf);

int b64_in(int offset, char[] buffer, char[] outbuf);

public int main(int argc, char[][] argv) {
  if (argc>1) {
    fprintf(stderr, "Usage: %s\n", argv[0]);
    return 1;
  }

  // ファイル名入力
  fgets(lbuf, N, stdin);
  chomp(lbuf);

  debug("sr: fopen:%s\n",lbuf);
  FILE fp = fopen(lbuf, "w");
  if (fp==null) {
    perror(lbuf);
    debug("sr: fp is null");
    exit(1);
  }

  // ファイルサイズ入力
  fgets(lbuf, N, stdin);
  int fsize = atoi(lbuf);
  debug("sr: filesize:%d\n",fsize);

  // ブロックサイズ入力
  fgets(lbuf, N, stdin);
  int bsize = atoi(lbuf);
  debug("sr: blocksize:%d\n",bsize);


  char[] bbuf = malloc(bsize + 2);
  char[] outbuf = malloc(3);

  int cfsize = 0;
  while (cfsize<fsize) {
    input(bsize, bbuf);
    fgets(bbuf, bsize + 2, stdin);
    fprintf(stdout, "!\n");
    fflush(stdout);

    int blen = strLen(bbuf) - 1;
    /// [入力のパース]

    int offset = 0;
    while(offset < blen) {
      int dataLen = b64_in(offset, bbuf, outbuf);
      bwrite(fp, outbuf, dataLen);
      offset = offset + 4;
      cfsize = cfsize + dataLen;
    }

    debug("sr: file: %d / %d\n", cfsize, fsize);

    if(cfsize > fsize) {
      fprintf(stderr, "!sent data is longer than filesize!\n");
      exit(1);
    }
    /// [/入力のパース]

  }
  fclose(fp);

  return 0;
}

/**
 * @return 文字aに対応する0~63のコード、または-1
 */
int b64_ind(char a) {
  int i = ord(a);
  if(isDigit(a)) return i - 0x30;
  if(isUpper(a)) return i - 0x41 + 10;
  if(isLower(a)) return i - 0x61 + 36;
  if(a == '+') return 62;
  if(a == '/') return 63;
  return -1;
}

int input(int length, char[] inbuf) {
  int i = 0;
  while(i < length) {
    char c = fgetc(stdin);
    if(!isAlnum(c) && c != '+' && c != '/') continue; //BASE64文字列以外なら捨てる
    inbuf[i] = c;
    i = i + 1;
  }
  return i;
}

/**
 * buffer[offset]から読み、最大3文字をoutbufに格納する
 * @param offset 開始位置
 * @param buffer Base64エンコードされた文字列
 * @param outbuf 3文字まで格納できる配列
 * @return outbufに格納した文字数
 */
int b64_in(int offset, char[] buffer, char[] outbuf) {
  int i0 = b64_ind(buffer[offset]);
  if(i0 == -1) return 0;
  int i1 = b64_ind(buffer[offset + 1]);
  if(i1 == -1) return 0;
  outbuf[0] = chr(i0 << 2 | i1 >> 4);
  int i2 = b64_ind(buffer[offset + 2]);
  if(i2 == -1) return 1;
  outbuf[1] = chr((i1 << 4 | i2 >> 2) & 0xff);
  int i3 = b64_ind(buffer[offset + 3]);
  if(i3 == -1) return 2;
  outbuf[2] = chr((i2 << 6 | i3) & 0xff);
  return 3;
}

/**
 * strの末尾の改行を取り除く
 * @param str 改行を含む文字列
 */
void chomp(char[] str) {
  int pos=strRchr(str, '\n');
  if (pos==-1) {
    fprintf(stderr, "sr: format error");
    exit(1);
  }
  str[pos] = '\0';
}
