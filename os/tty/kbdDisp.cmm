/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2017 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * tty/kbdDisp.cmm : キーボードディスプレイドライバ
 *
 * 2017.01.25 : 新規作成
 *
 * $Id$
 *
 */

#include <util.h>
#include <kernel.h>
#include "kbdDisp.h"

#define TTY_Data 0x08
#define TTY_Ctrl 0x0a

RingBuf rcvBuf = { null, 0, 0 };          // リングバッファインスタンス
RingBuf trsBuf = { null, 0, 0 };

/*
 *  入出力制御
 */

// 送信関係
boolean trsIdle;                          // トランスミッタがアイドル状態

// ディスプレイ 表示割込み処理ルーチン
interrupt ttyTrs() {
  if (ISEmpty(trsBuf)) {                  // 送信すべきデータがないなら
    out(TTY_Ctrl,0x0040);                 // 送信割込み禁止
    trsIdle = true;
  } else {                                // そうでなければ
    int c = ord(getBuf(trsBuf));          // 送信バッファから一文字取り出す
    while ((in(TTY_Ctrl) & 0x80)==0)
      ;
    out(TTY_Data,c);                      // データを送信
  }
}

// ディスプレイ へ１文字出力
public void putTty(char c) {
  setPri(KERN|DI);                        // 割込み禁止状態で
  if (trsIdle) {                          // 送信中でなければ
    if(c=='\n'){
      putBuf(trsBuf, c);                  // 送信バッファに１文字追加
      c='\r';
    }
    out(TTY_Ctrl,0x00c0);                 // 割込みを許可し
    while ((in(TTY_Ctrl) & 0x80)==0)
      ;
    out(TTY_Data,ord(c));                 // 送信を始める
    trsIdle = false;
  } else {
    putBuf(trsBuf, c);                    // 送信バッファに１文字追加
  }
  setPri(KERN|EI);
}

// ディスプレイ へ文字列出力
public void putStrTty(char[] str){
  int len = strLen(str);
  for(int i=0;i<len;i=i+1){
    putTty(str[i]);
  }
}

// 受信関係
int  sem;  // キーコード を排他制御するセマフォ

// キーボード から入力された文字をバッファに格納する
void rcvData(char c) {
  putBuf(rcvBuf, c); // バッファへ転記
}

// キーボード 受信割込み処理ルーチン
interrupt ttyRcv()  {
  char c = chr(in(TTY_Data));  // 受信データを入力する
  rcvData(c);
  semV(sem);                   // プロセスを起こす
}

char[] _buf1 = array(BSIZE);
char[] _buf2 = array(BSIZE);
public void ttyInit() {
  int[] vect = _ItoA(0xffe0);
  vect[4] = addrof(ttyRcv);    // 割込みベクタ初期化
  vect[5] = addrof(ttyTrs);    // 割込みベクタ初期化
  rcvBuf.buf = _buf1;
  trsBuf.buf = _buf2;
  in(TTY_Data);                // 受信バッファのゴミをとる
  out(TTY_Ctrl,0x40);          // tty 受信割込み許可、送信割込み禁止
  trsIdle = true;
}

// キーボード から１文字入力
public char getKeyCode() {
  semP(sem);  // キーボード待ちで止まる
  char c = getBuf(rcvBuf);
  return c;
}

// キーボード から１文字取得
public char getTty(){
  return getBuf(rcvBuf);
}
